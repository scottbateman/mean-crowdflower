"use strict";var ApplicationConfiguration=function(){var applicationModuleName="ngauge-meanjs",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("articles"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("datasteps"),ApplicationConfiguration.registerModule("golds"),ApplicationConfiguration.registerModule("jobs"),ApplicationConfiguration.registerModule("jobtemplates"),ApplicationConfiguration.registerModule("judgments"),ApplicationConfiguration.registerModule("tweets"),ApplicationConfiguration.registerModule("units"),ApplicationConfiguration.registerModule("users"),ApplicationConfiguration.registerModule("workers"),ApplicationConfiguration.registerModule("workflows"),angular.module("articles").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Articles","articles","dropdown","/articles(/create)?"),Menus.addSubMenuItem("topbar","articles","List Articles","articles"),Menus.addSubMenuItem("topbar","articles","New Article","articles/create")}]),angular.module("articles").config(["$stateProvider",function($stateProvider){$stateProvider.state("listArticles",{url:"/articles",templateUrl:"modules/articles/views/list-articles.client.view.html"}).state("createArticle",{url:"/articles/create",templateUrl:"modules/articles/views/create-article.client.view.html"}).state("viewArticle",{url:"/articles/:articleId",templateUrl:"modules/articles/views/view-article.client.view.html"}).state("editArticle",{url:"/articles/:articleId/edit",templateUrl:"modules/articles/views/edit-article.client.view.html"})}]),angular.module("articles").controller("ArticlesController",["$scope","$stateParams","$location","Authentication","Articles",function($scope,$stateParams,$location,Authentication,Articles){$scope.authentication=Authentication,$scope.create=function(){var article=new Articles({title:this.title,content:this.content});article.$save(function(response){$location.path("articles/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(article){if(article){article.$remove();for(var i in $scope.articles)$scope.articles[i]===article&&$scope.articles.splice(i,1)}else $scope.article.$remove(function(){$location.path("articles")})},$scope.update=function(){var article=$scope.article;article.$update(function(){$location.path("articles/"+article._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.articles=Articles.query()},$scope.findOne=function(){$scope.article=Articles.get({articleId:$stateParams.articleId})}}]),angular.module("articles").factory("Articles",["$resource",function($resource){return $resource("articles/:articleId",{articleId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("datasteps").config(["$stateProvider",function($stateProvider){$stateProvider.state("listDatasteps",{url:"/datasteps",templateUrl:"modules/datasteps/views/list-datasteps.client.view.html"}).state("createDatastep",{url:"/datasteps/create",templateUrl:"modules/datasteps/views/create-datastep.client.view.html"}).state("viewDatastep",{url:"/datasteps/:datastepId",templateUrl:"modules/datasteps/views/view-datastep.client.view.html"}).state("editDatastep",{url:"/datasteps/:datastepId/edit",templateUrl:"modules/datasteps/views/edit-datastep.client.view.html"})}]),angular.module("datasteps").controller("DatastepsController",["$scope","$stateParams","$location","Authentication","Datasteps",function($scope,$stateParams,$location,Authentication,Datasteps){$scope.authentication=Authentication,$scope.create=function(){var datastep=new Datasteps({name:this.name});datastep.$save(function(response){$location.path("datasteps/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(datastep){if(datastep){datastep.$remove();for(var i in $scope.datasteps)$scope.datasteps[i]===datastep&&$scope.datasteps.splice(i,1)}else $scope.datastep.$remove(function(){$location.path("datasteps")})},$scope.update=function(){var datastep=$scope.datastep;datastep.$update(function(){$location.path("datasteps/"+datastep._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.datasteps=Datasteps.query()},$scope.findOne=function(){$scope.datastep=Datasteps.get({datastepId:$stateParams.datastepId})}}]),angular.module("datasteps").factory("Datasteps",["$resource",function($resource){return $resource("api/datasteps/:datastepId",{datastepId:"@_id"},{update:{method:"PUT"}})}]),angular.module("golds").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Golds","golds","dropdown","/golds(/create)?"),Menus.addSubMenuItem("topbar","golds","List Golds","golds"),Menus.addSubMenuItem("topbar","golds","New Gold","golds/create")}]),angular.module("golds").config(["$stateProvider",function($stateProvider){$stateProvider.state("listGolds",{url:"/golds",templateUrl:"modules/golds/views/list-golds.client.view.html"}).state("createGold",{url:"/golds/create",templateUrl:"modules/golds/views/create-gold.client.view.html"}).state("viewGold",{url:"/golds/:goldId",templateUrl:"modules/golds/views/view-gold.client.view.html"}).state("editGold",{url:"/golds/:goldId/edit",templateUrl:"modules/golds/views/edit-gold.client.view.html"})}]),angular.module("golds").controller("GoldsController",["$scope","$stateParams","$location","Authentication","Golds",function($scope,$stateParams,$location,Authentication,Golds){$scope.authentication=Authentication,$scope.create=function(){var gold=new Golds({name:this.name});gold.$save(function(response){$location.path("golds/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(gold){if(gold){gold.$remove();for(var i in $scope.golds)$scope.golds[i]===gold&&$scope.golds.splice(i,1)}else $scope.gold.$remove(function(){$location.path("golds")})},$scope.update=function(){var gold=$scope.gold;gold.$update(function(){$location.path("golds/"+gold._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.golds=Golds.query()},$scope.findOne=function(){$scope.gold=Golds.get({goldId:$stateParams.goldId})}}]),angular.module("golds").factory("Golds",["$resource",function($resource){return $resource("api/golds/:goldId",{goldId:"@_id"},{update:{method:"PUT"}})}]),angular.module("jobs").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Jobs","jobs","dropdown","/jobs(/create)?"),Menus.addSubMenuItem("topbar","jobs","List Jobs","jobs"),Menus.addSubMenuItem("topbar","jobs","New Job","jobs/create")}]),angular.module("jobs").config(["$stateProvider",function($stateProvider){$stateProvider.state("listJobs",{url:"/jobs",templateUrl:"modules/jobs/views/list-jobs.client.view.html"}).state("createJob",{url:"/jobs/create",templateUrl:"modules/jobs/views/create-job.client.view.html"}).state("viewJob",{url:"/jobs/:jobId",templateUrl:"modules/jobs/views/view-job.client.view.html"}).state("editJob",{url:"/jobs/:jobId/edit",templateUrl:"modules/jobs/views/edit-job.client.view.html"})}]),angular.module("jobs").controller("JobsController",["$scope","$stateParams","$location","Authentication","Jobs",function($scope,$stateParams,$location,Authentication,Jobs){$scope.authentication=Authentication,$scope.create=function(){var job=new Jobs({name:this.name});job.$save(function(response){$location.path("jobs/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(job){if(job){job.$remove();for(var i in $scope.jobs)$scope.jobs[i]===job&&$scope.jobs.splice(i,1)}else $scope.job.$remove(function(){$location.path("jobs")})},$scope.update=function(){var job=$scope.job;job.$update(function(){$location.path("jobs/"+job._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.jobs=Jobs.query()},$scope.findOne=function(){$scope.job=Jobs.get({jobId:$stateParams.jobId})}}]),angular.module("jobs").factory("Jobs",["$resource",function($resource){return $resource("api/jobs/:jobId",{jobId:"@_id"},{update:{method:"PUT"}})}]),angular.module("jobtemplates").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Jobtemplates","jobtemplates","dropdown","/jobtemplates(/create)?"),Menus.addSubMenuItem("topbar","jobtemplates","List Jobtemplates","jobtemplates"),Menus.addSubMenuItem("topbar","jobtemplates","New Jobtemplate","jobtemplates/create")}]),angular.module("jobtemplates").config(["$stateProvider",function($stateProvider){$stateProvider.state("listJobtemplates",{url:"/jobtemplates",templateUrl:"modules/jobtemplates/views/list-jobtemplates.client.view.html"}).state("createJobtemplate",{url:"/jobtemplates/create",templateUrl:"modules/jobtemplates/views/create-jobtemplate.client.view.html"}).state("viewJobtemplate",{url:"/jobtemplates/:jobtemplateId",templateUrl:"modules/jobtemplates/views/view-jobtemplate.client.view.html"}).state("editJobtemplate",{url:"/jobtemplates/:jobtemplateId/edit",templateUrl:"modules/jobtemplates/views/edit-jobtemplate.client.view.html"})}]),angular.module("jobtemplates").controller("JTBaseCtrl",["$scope","$stateParams","$location","Authentication","Jobtemplates",function($scope,$stateParams,$location,Authentication,Jobtemplates){$scope.authentication=Authentication,$scope.models=["Tweet"],$scope.find=function(){$scope.jobtemplates=Jobtemplates.query()},$scope.findOne=function(){$scope.jobtemplate=Jobtemplates.get({jobtemplateId:$stateParams.jobtemplateId}),console.log($scope)}}]),angular.module("jobtemplates").controller("JTEditCtrl",["$scope","$stateParams","$location","Authentication","Jobtemplates",function($scope,$stateParams,$location,Authentication,Jobtemplates){$scope.authentication=Authentication,$scope.fields=[],$scope.jobtemplate=Jobtemplates.get({jobtemplateId:$stateParams.jobtemplateId},function(){for(var fields=$scope.jobtemplate.fields,i=0;i<fields.length;i++)$scope.fields.push({value:fields[i]})}),$scope.addField=function(){$scope.fields.push({value:""})},$scope.removeField=function(index){index>-1&&$scope.fields.splice(index,1)},$scope.update=function(){for(var jobtemplate=$scope.jobtemplate,i=0;i<$scope.fields.length;i++)jobtemplate.fields[i]=$scope.fields[i].value;jobtemplate.$update(function(){$location.path("jobtemplates/"+jobtemplate._id)},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("jobtemplates").controller("JobtemplatesController",["$scope","$stateParams","$location","Authentication","Jobtemplates",function($scope,$stateParams,$location,Authentication,Jobtemplates){$scope.authentication=Authentication,$scope.models=["Tweet"],$scope.addField=function(){$scope.fields.push({value:""})},$scope.removeField=function(index){index>-1&&$scope.fields.splice(index,1)},$scope.prepCreate=function(){$scope.fields=[]},$scope.create=function(){for(var fields=[],i=0;i<this.fields.length;i++)fields.push(this.fields[i].value);var jobtemplate=new Jobtemplates({name:this.name,model:this.model,data:{css:this.css,js:this.js,cml:this.cml},fields:fields});jobtemplate.$save(function(response){$location.path("jobtemplates/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(jobtemplate){if(jobtemplate){jobtemplate.$remove();for(var i in $scope.jobtemplates)$scope.jobtemplates[i]===jobtemplate&&$scope.jobtemplates.splice(i,1)}else $scope.jobtemplate.$remove(function(){$location.path("jobtemplates")})},$scope.find=function(){$scope.jobtemplates=Jobtemplates.query()},$scope.findOne=function(){$scope.jobtemplate=Jobtemplates.get({jobtemplateId:$stateParams.jobtemplateId})}}]),angular.module("jobtemplates").factory("Jobtemplates",["$resource",function($resource){return $resource("api/jobtemplates/:jobtemplateId",{jobtemplateId:"@_id"},{update:{method:"PUT"}})}]),angular.module("judgments").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Judgments","judgments","dropdown","/judgments(/create)?"),Menus.addSubMenuItem("topbar","judgments","List Judgments","judgments"),Menus.addSubMenuItem("topbar","judgments","New Judgment","judgments/create")}]),angular.module("judgments").config(["$stateProvider",function($stateProvider){$stateProvider.state("listJudgments",{url:"/judgments",templateUrl:"modules/judgments/views/list-judgments.client.view.html"}).state("createJudgment",{url:"/judgments/create",templateUrl:"modules/judgments/views/create-judgment.client.view.html"}).state("viewJudgment",{url:"/judgments/:judgmentId",templateUrl:"modules/judgments/views/view-judgment.client.view.html"}).state("editJudgment",{url:"/judgments/:judgmentId/edit",templateUrl:"modules/judgments/views/edit-judgment.client.view.html"})}]),angular.module("judgments").controller("JudgmentsController",["$scope","$stateParams","$location","Authentication","Judgments",function($scope,$stateParams,$location,Authentication,Judgments){$scope.authentication=Authentication,$scope.create=function(){var judgment=new Judgments({name:this.name});judgment.$save(function(response){$location.path("judgments/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(judgment){if(judgment){judgment.$remove();for(var i in $scope.judgments)$scope.judgments[i]===judgment&&$scope.judgments.splice(i,1)}else $scope.judgment.$remove(function(){$location.path("judgments")})},$scope.update=function(){var judgment=$scope.judgment;judgment.$update(function(){$location.path("judgments/"+judgment._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.judgments=Judgments.query()},$scope.findOne=function(){$scope.judgment=Judgments.get({judgmentId:$stateParams.judgmentId})}}]),angular.module("judgments").factory("Judgments",["$resource",function($resource){return $resource("api/judgments/:judgmentId",{judgmentId:"@_id"},{update:{method:"PUT"}})}]),angular.module("tweets").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Tweets","tweets","dropdown","/tweets(/create)?"),Menus.addSubMenuItem("topbar","tweets","List Tweets","tweets"),Menus.addSubMenuItem("topbar","tweets","New Tweet","tweets/create")}]),angular.module("tweets").config(["$stateProvider",function($stateProvider){$stateProvider.state("listTweets",{url:"/tweets",templateUrl:"modules/tweets/views/list-tweets.client.view.html"}).state("createTweets",{url:"/tweets/create",templateUrl:"modules/tweets/views/upload-tweet.client.view.html"}).state("viewTweet",{url:"/tweets/:tweetId",templateUrl:"modules/tweets/views/view-tweet.client.view.html"}).state("editTweet",{url:"/tweets/:tweetId/edit",templateUrl:"modules/tweets/views/edit-tweet.client.view.html"})}]),angular.module("tweets").controller("TweetsController",["$scope","$stateParams","$location","Authentication","Tweets",function($scope,$stateParams,$location,Authentication,Tweets){$scope.authentication=Authentication,$scope.create=function(){var tweet=new Tweets({name:this.name});tweet.$save(function(response){$location.path("tweets/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(tweet){if(tweet){tweet.$remove();for(var i in $scope.tweets)$scope.tweets[i]===tweet&&$scope.tweets.splice(i,1)}else $scope.tweet.$remove(function(){$location.path("tweets")})},$scope.update=function(){var tweet=$scope.tweet;tweet.$update(function(){$location.path("tweets/"+tweet._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.tweets=Tweets.query()},$scope.findOne=function(){$scope.tweet=Tweets.get({tweetId:$stateParams.tweetId})}}]),angular.module("tweets").factory("Tweets",["$resource",function($resource){return $resource("api/tweets/:tweetId",{tweetId:"@_id"},{update:{method:"PUT"}})}]),angular.module("units").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Units","units","dropdown","/units(/create)?"),Menus.addSubMenuItem("topbar","units","List Units","units"),Menus.addSubMenuItem("topbar","units","New Unit","units/create")}]),angular.module("units").config(["$stateProvider",function($stateProvider){$stateProvider.state("listUnits",{url:"/units",templateUrl:"modules/units/views/list-units.client.view.html"}).state("createUnit",{url:"/units/create",templateUrl:"modules/units/views/create-unit.client.view.html"}).state("viewUnit",{url:"/units/:unitId",templateUrl:"modules/units/views/view-unit.client.view.html"}).state("editUnit",{url:"/units/:unitId/edit",templateUrl:"modules/units/views/edit-unit.client.view.html"})}]),angular.module("units").controller("UnitsController",["$scope","$stateParams","$location","Authentication","Units",function($scope,$stateParams,$location,Authentication,Units){$scope.authentication=Authentication,$scope.create=function(){var unit=new Units({name:this.name});unit.$save(function(response){$location.path("units/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(unit){if(unit){unit.$remove();for(var i in $scope.units)$scope.units[i]===unit&&$scope.units.splice(i,1)}else $scope.unit.$remove(function(){$location.path("units")})},$scope.update=function(){var unit=$scope.unit;unit.$update(function(){$location.path("units/"+unit._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.units=Units.query()},$scope.findOne=function(){$scope.unit=Units.get({unitId:$stateParams.unitId})}}]),angular.module("units").factory("Units",["$resource",function($resource){return $resource("api/units/:unitId",{unitId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invlaid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http.delete("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]),angular.module("workers").config(["$stateProvider",function($stateProvider){$stateProvider.state("listWorkers",{url:"/workers",templateUrl:"modules/workers/views/list-workers.client.view.html"}).state("createWorker",{url:"/workers/create",templateUrl:"modules/workers/views/create-worker.client.view.html"}).state("viewWorker",{url:"/workers/:workerId",templateUrl:"modules/workers/views/view-worker.client.view.html"}).state("editWorker",{url:"/workers/:workerId/edit",templateUrl:"modules/workers/views/edit-worker.client.view.html"})}]),angular.module("workers").controller("WorkersController",["$scope","$stateParams","$location","Authentication","Workers",function($scope,$stateParams,$location,Authentication,Workers){$scope.authentication=Authentication,$scope.create=function(){var worker=new Workers({name:this.name});worker.$save(function(response){$location.path("workers/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(worker){if(worker){worker.$remove();for(var i in $scope.workers)$scope.workers[i]===worker&&$scope.workers.splice(i,1)}else $scope.worker.$remove(function(){$location.path("workers")})},$scope.update=function(){var worker=$scope.worker;worker.$update(function(){$location.path("workers/"+worker._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.workers=Workers.query()},$scope.findOne=function(){$scope.worker=Workers.get({workerId:$stateParams.workerId})}}]),angular.module("workers").factory("Workers",["$resource",function($resource){return $resource("api/workers/:workerId",{workerId:"@_id"},{update:{method:"PUT"}})}]),angular.module("workflows").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Workflows","workflows","dropdown","/workflows(/create)?"),Menus.addSubMenuItem("topbar","workflows","List Workflows","workflows"),Menus.addSubMenuItem("topbar","workflows","New Workflow","workflows/create")}]),angular.module("workflows").config(["$stateProvider",function($stateProvider){$stateProvider.state("listWorkflows",{url:"/workflows",templateUrl:"modules/workflows/views/list-workflows.client.view.html"}).state("createWorkflow",{url:"/workflows/create",templateUrl:"modules/workflows/views/create-workflow.client.view.html"}).state("viewWorkflow",{url:"/workflows/:workflowId",templateUrl:"modules/workflows/views/view-workflow.client.view.html"}).state("editWorkflow",{url:"/workflows/:workflowId/edit",templateUrl:"modules/workflows/views/edit-workflow.client.view.html"})}]),angular.module("workflows").controller("WorkflowsBaseCtrl",["$scope","$stateParams","$location","Authentication","Workflows","Jobtemplates",function($scope,$stateParams,$location,Authentication,Workflows){$scope.authentication=Authentication,$scope.logScope=function(){console.log($scope)},$scope.find=function(){$scope.workflows=Workflows.query()},$scope.findOne=function(){$scope.workflow=Workflows.get({workflowId:$stateParams.workflowId})}}]),angular.module("workflows").controller("WorkflowsEditCtrl",["$scope","$stateParams","$location","Authentication","Workflows","Jobtemplates",function($scope,$stateParams,$location,Authentication,Workflows,Jobtemplates){$scope.authentication=Authentication,$scope.models=["Tweet"],$scope.addStep=function(){$scope.workflow.steps.push({})},$scope.removeStep=function(index){index>-1&&$scope.workflow.steps.splice(index,1)},$scope.loadStepTemplate=function(step){alert("loadStepTemplate"),step.templateObject=Jobtemplates.get({jobtemplateId:step.template})},$scope.prepEdit=function(){$scope.loadTemplates($scope.workflow.model)},$scope.loadTemplates=function(model){$scope.templates=Jobtemplates.query({model:model})},$scope.loadFields=function(step,templateIndex){step.template=$scope.templates[templateIndex]._id,step.queue=[],step.requirements=[];for(var i=0;i<$scope.templates[templateIndex].fields.length;i++)step.requirements.push({field:$scope.templates[templateIndex].fields[i]})},$scope.setTemplateIndex=function(step){for(var i=0;i<$scope.templates;i++)$scope.templates[i]._id==step.template&&(step.templateIndex=i)},$scope.update=function(){var workflow=$scope.workflow;workflow.$update(function(){$location.path("workflows/"+workflow._id)},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("workflows").controller("WorkflowsController",["$scope","$stateParams","$location","Authentication","Workflows","Jobtemplates",function($scope,$stateParams,$location,Authentication,Workflows,Jobtemplates){$scope.authentication=Authentication,$scope.addStep=function(){$scope.steps.push({})},$scope.logScope=function(){console.log($scope)},$scope.removeStep=function(index){index>-1&&$scope.steps.splice(index,1)},$scope.loadStepTemplate=function(step){step.templateObject=Jobtemplates.get({jobtemplateId:step.template})},$scope.prepCreate=function(){$scope.steps=[],$scope.models=["Tweet","Farts"]},$scope.prepEdit=function(){$scope.models=["Tweet","Farts"],$scope.loadTemplates($scope.workflow.model)},$scope.loadTemplates=function(model){$scope.templates=Jobtemplates.query({model:model})},$scope.setFields=function(step,templateIndex){step.template=$scope.templates[templateIndex]._id,step.queue=[],step.requirements=[];
for(var i=0;i<$scope.templates[templateIndex].fields.length;i++)step.requirements.push({field:$scope.templates[templateIndex].fields[i]})},$scope.create=function(){var workflow=new Workflows({name:this.name,active:this.active?this.active:!1,apiKey:this.apiKey,model:this.model,steps:this.steps});console.log(JSON.stringify(workflow)),workflow.$save(function(response){$location.path("workflows/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(workflow){if(workflow){workflow.$remove();for(var i in $scope.workflows)$scope.workflows[i]===workflow&&$scope.workflows.splice(i,1)}else $scope.workflow.$remove(function(){$location.path("workflows")})},$scope.update=function(){var workflow=$scope.workflow;workflow.$update(function(){$location.path("workflows/"+workflow._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.workflows=Workflows.query()},$scope.findOne=function(){$scope.workflow=Workflows.get({workflowId:$stateParams.workflowId})}}]),angular.module("workflows").factory("Workflows",["$resource",function($resource){return $resource("api/workflows/:workflowId",{workflowId:"@_id"},{update:{method:"PUT"}})}]);